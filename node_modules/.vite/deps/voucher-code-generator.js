import {
  __commonJS
} from "./chunk-HUBM7RA2.js";

// node_modules/voucher-code-generator/voucher_codes.js
var require_voucher_codes = __commonJS({
  "node_modules/voucher-code-generator/voucher_codes.js"(exports, module) {
    (function() {
      "use strict";
      var root = this;
      function randomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }
      function randomElem(arr) {
        return arr[randomInt(0, arr.length - 1)];
      }
      function sequenceElem(config, sequenceOffset, charIndex) {
        return config.unique_charset[Math.floor(sequenceOffset / Math.pow(config.unique_charset.length, config.length - charIndex - 1)) % config.unique_charset.length];
      }
      function charset(name) {
        var charsets = {
          numbers: "0123456789",
          alphabetic: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
          alphanumeric: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        };
        return charsets[name];
      }
      function repeat(str, count) {
        var res = "";
        for (var i = 0; i < count; i++) {
          res += str;
        }
        return res;
      }
      function Config(config) {
        config = config || {};
        this.count = config.count || 1;
        this.length = config.length || 8;
        this.charset = config.charset || charset("alphanumeric");
        this.unique_charset = uniqueCharset(this.charset);
        this.prefix = config.prefix || "";
        this.postfix = config.postfix || "";
        this.pattern = config.pattern || repeat("#", this.length);
        if (config.pattern) {
          this.length = (config.pattern.match(/#/g) || []).length;
        }
      }
      function uniqueCharset(charset2) {
        var map = {};
        var result = [];
        for (var i = 0; i < charset2.length; i++) {
          const sign = charset2[i];
          if (!map[sign]) {
            result.push(sign);
            map[sign] = true;
          }
        }
        return result.join("");
      }
      function generateOne(config, sequenceOffset) {
        var generateIndex = 0;
        var code = config.pattern.split("").map(function(char) {
          if (char === "#") {
            if (isNaN(sequenceOffset)) {
              return randomElem(config.charset);
            }
            return sequenceElem(config, sequenceOffset, generateIndex++);
          } else {
            return char;
          }
        }).join("");
        return config.prefix + code + config.postfix;
      }
      function maxCombinationsCount(config) {
        return Math.pow(config.unique_charset.length, config.length);
      }
      function isFeasible(config) {
        return maxCombinationsCount(config) >= config.count;
      }
      function generate(config, sequenceOffset) {
        config = new Config(config);
        var count = config.count;
        if (!isFeasible(config)) {
          throw new Error("Not possible to generate requested number of codes.");
        }
        sequenceOffset = +sequenceOffset;
        if (!isNaN(sequenceOffset)) {
          if (sequenceOffset < 0) {
            sequenceOffset = 0;
          } else if (sequenceOffset >= maxCombinationsCount(config)) {
            sequenceOffset = maxCombinationsCount(config) - 1;
          }
        }
        var map = {};
        var codes = [];
        while (count > 0) {
          var code = generateOne(config, sequenceOffset);
          if (!map[code]) {
            codes.push(code);
            map[code] = true;
            count--;
          }
          sequenceOffset++;
        }
        return codes;
      }
      var voucher_codes = {
        generate,
        charset
      };
      if (typeof exports !== "undefined") {
        if (typeof module !== "undefined" && module.exports) {
          exports = module.exports = voucher_codes;
        }
        exports = voucher_codes;
      } else {
        root.voucher_codes = voucher_codes;
      }
    }).call(exports);
  }
});
export default require_voucher_codes();
//# sourceMappingURL=voucher-code-generator.js.map
